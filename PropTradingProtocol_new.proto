syntax="proto3";
package PropTradingProtocol;

//VERSION: 4 - 03/16/2024

//The ONLY message that can be sent to the trading server
message ClientRequestMsg
{
	//Login with the provided token
	LoginRequestMsg LoginReq = 1;
	//ping message to send to the server. A ping message should be sent each 45 seconds
	PingMsg Ping = 2; 
	//Request of account list and orders/positions snapshot
	InfoReqMsg InfoReq  = 3;
	//Contract id request
	ContractReqMsg ContractReq = 4;
	//Request of daily pl for instruments
	repeated DailyPlReqMsg DailyPls = 5;
	//order submission: Insert, Modify, Remove
	repeated OrderMsg Order = 6;
	//message sent from client to the server for logging reason - it is not used on this scenario
	LogInfoMsg LogMsg = 7;
	//request of available tradable symbols. It always return the front month contract and the next contract if the expirations is closer
	SymbolLookupReqMsg SymbolLookup = 8;
	//request for cancel orders or flat a positions for a specific contract or all account
	CancelFlatReqMsg CancelFlatReq = 9;
	//used only if "IsManualAccountSubscribe" = true, othwerwise all accounts are automatically subscribed. 
	//IMPORTANT: in order to keep consistency, please request it together with InfoReqMsg
	AccountSubscribeReqMsg AccountSubscribeReq = 10;
}

//Message received by the server
message ServerResponseMsg
{
	//Login response
	LoginResponseMsg LoginMsg = 1;
	//Pong response to Ping msg. The PONG should be received within about 5 seconds
	PongMsg Pong = 2;
	//Response to snapshot request
	InfoRespMsg InfoMsg = 3;
	//updates for accounts' balance
	repeated BalanceMsg BalanceInfo = 4;
	//response for contract request
	ContractRespMsg ContractMsg = 5;
	//response for daily pl requested or it is sent for daily pl snapshot on OrdAndPos info request msg
	repeated DailyPlRespMsg DailyPls = 6;
	//realtime update for orders' status
	repeated OrderInfoMsg OrderInfo = 7;
	//server close for current session
	LoggedOffMsg LoggedOff = 8;
	//message from server that should be shown to the user
	LogInfoMsg LogMsg = 9;
	//response to symbol lookup request
	SymbolLookupRespMsg SymbolLookup = 10;
	//realtime update for positions
	repeated PositionInfoMsg PositionInfo = 11;
	//response to CancelFlatReq
	CancelFlatRespMsg CancelFlatMsg = 12;
	//realtime update for brackets' status
	repeated BracketInfoMsg BracketInfo = 13;
	//response to BracketInsert Request
	BracketInsertReportMsg BracketInsertReport = 14;
	//response to Account subscribe request
	AccountSubscribeRespMsg AccountSubscribeResp = 15;
	//realtime updates on new accounts or status changed
	repeated AccountStatusUpdateMsg AccountStatusUpdates = 16;
}
message LoginRequestMsg
{
	//token retrieved from auth post request
	string Token = 1;
	//it is not used for this scenario
	string OtpCode = 2;
	//default is false. It is used on system connection for selective accounts load/subscribe
	bool IsManualAccountSubscribe = 3;
}
message	LoginResponseMsg
{
	bool success = 1;
	//Empty if success = true
	string reason = 2;
}
message LoggedOffMsg
{
	//Reason why the session has been closed. E.g.: concurrent session opened
	string Reason = 1;
}
message PingMsg
{
	bool Connected = 1;
}
message PongMsg
{
	bool Connected = 1;
}
enum SymbolCategoryEnum
{
    Blank_choice_2 = 0;

	Future = 1;
	Forex = 2;
	Index = 3;
	Option = 4;
	Stock = 5;
}
//Request of contract id and detail based on FeedSymbol or ContractId
message ContractReqMsg
{
	//Symbol of which the id must be returned. E.g.: /ESZ22.XCME
	//The symbol root is the same of market data
	string FeedSymbol = 1;
	//It is optional for this scenario
	SymbolCategoryEnum Category = 2;
	//If "FeedSymbol" is setted, this field is ignored by the server
	sint64 ContractId = 3;
	//Not used in this scenario
	string Isin = 4;
}
message ContractRespMsg
{
	string FeedSymbol = 1;
	SymbolCategoryEnum Category = 2;
	//the contract id of the symbol requested. It should be stored inside the application and used for various message like order insert, daily pl request and so on
	sint64 ContractId = 3;
	//some detail about the contract
	ContractInfoMsg contractInfo = 4;
}
message ContractInfoMsg{
	string ContractName = 1;
	string Symbol = 2;
	string Exchange = 3;
	string Description = 4;
	double TickSize = 5;
	double TickValue = 6;
	sint64 Margin = 7;
	double OrderCommission = 8;
	bool IsCommissionPerContract = 9;
	bool IsStock = 10;
	string FeedSymbol = 11;
}
message DailyPlReqMsg
{
	sint64 ContractId = 1;
	sint64 AccNumber = 2;
	sint64 RequestId = 3;
}
message DailyPlRespMsg
{
	sint64 ContractId = 1;
	sint64 AccNumber = 2;
	double DailyPl = 3;
	string FeedSymbol = 4;
	//it is -1 for snapshot message, while it is the same of DailyPlReqMsg for daily pl request
	sint64 RequestId = 5;
	double DailyNetPl = 6;
	//not used in this scenario
	string Isin = 7;
}
enum InfoModeEnum{
    Blank_choice_4 = 0;
	//used to get trading account list(AccountHeaderMsg)
	Account = 1;
	//used to get a snapshot of the portfolio and pending orders. It will populates orderList field, in this scenario you will receive an initial snapshot of open positions as orders infos and then order updates,
	//so it means that you have to build portfolio with the order udpates
	OrdAndPos = 2;
	//used to get position. It will populates PositionList field and in this scenario you may use this field to show portfolio, without updating it with the order executions, even if it is NOT the suggested approch
	Positions = 3;
}
enum AccountStatusEnum
{

	INITIALIZED = 0;
		ALL = -1;
	ENABLED = 1; 
	SUCCESS = 2; 
	FAILED = 4; 
	DISABLED = 8; 
}
message InfoReqMsg{
	//ignored if 'Modes" field is populated
	InfoModeEnum Mode = 1;
	sint64 RequestId = 2;
	//system connection only. For user, only active accounts are returned. -1 is ALL, othwerwise X_OR combination can be used
	AccountStatusEnum AccountListFilterStatus = 3;
	//ignore if the socket is not using "IsManualAccountSubscribe". Can be used only on mode OrdAndPos(2) and Positions(3)
	repeated sint64 Accounts = 4;
	//if it is needed more information on the same response
	repeated InfoModeEnum Modes = 5;
}
message InfoRespMsg{
	repeated AccountHeaderMsg AccountList = 1;
	repeated OrderInfoMsg OrderList = 2;
	sint64 RequestId = 3;
	repeated PositionInfoMsg PositionList = 4;
	repeated BracketInfoMsg BracketList = 5;
}
message AccountHeaderMsg{
	//this field should be used on various message and it also identifies the account updates sent by the server
	sint64 accountNumber = 1;
	//header is only for user display purpose
	string accountHeader = 2;
	//custom field which can be setted from the propfirm
	string accountDescription = 3;
	//balance of the account
	BalanceMsg Balance = 4;
	bool IsTradingEnabled = 5;
	//more detailed status compared to 'IsTradingEnabled'
	AccountStatusEnum Status = 6;
}
//If the socket is using "IsManualAccountSubscribe", all accounts are automatically subscribe, so this message is not needed.
message AccountSubscribeReqMsg
{
	sint64 RequestId = 1;
	repeated sint64 Accounts = 2;
}
message AccountSubscribeRespMsg
{
	sint64 RequestId = 1;
	bool Success = 2;
	string Reason = 3;
}
//IMPORTANT: Each order message can contain only a filled field. It cannot have setted for exemple both "OrderInsert" and "OrderRemove". 
//Use the list on the "ClientRequestMsg" if you want to submit multiple orders at once
message OrderMsg
{
	//Insert a new order
	OrderInsertMsg OrderInsert = 1;
	//Remove an order
	OrderRemoveMsg OrderRemove = 2;
	//Modify an order
	OrderModifyMsg OrderModify = 3;
	//Attach a bracket/OCO strategy to a pending order. Important: the order MUST NOT have any OCO strategy already attached
	BracketInsertMsg BracketInsert = 4;
	//Modify the price of an existing bracket
	BracketModifyMsg BracketModify = 5;
}
enum OrderTypeEnum
{
	Market = 0;
	Limit = 1;
	Stop = 2;
	StopLimit = 3;
}
enum OrderExpireEnum
{   blank_choice_5 = 0;
	Never = 1;
	TillDay = 2;
}
message OrderInsertMsg
{
	//Contract id of the intrsument where the order should be placed
	sint64 ContractId = 1;
	//This id should be filled for tracking the order on realtime server updates. It has to be unique for each session
	//Default value is -1
	int32 SeqClientId = 2;
	//Quantity of the order. Use negative numbers for sell orders
	int32 Quantity = 3;
	//Limit price for limit orders, Trigger Price for Stop/Stop Limit orders
	double Price = 4;
	//order type
	OrderTypeEnum OrderType = 5;
	//account number
	sint64 AccNumber = 6;
	//Limit execution for stop limit orders
	double LimitPrice = 7;
	//optional - stop and/or targets to be linked with the entry order
	BracketStrategyParam BracketStrategy = 8;
}
message OrderModifyMsg
{
	//Contract id of the intrument where the order should be placed
	sint64 ContractId = 1;
	//Orgin server id. It can be retrieved from "OrderInfoMsg" message
	sint64 OrgServerId = 2;
	//This id should be filled for tracking the order on realtime server updates. It has to be unique for each session
	//Default value is -1
	int32 NewSeqClientId = 3;
	//All below fields are same as OrderInsertMsg
	//If brackets orders are linked, quantity can only decrease
	int32 Quantity = 4;
	double Price_OrderModifyMsg = 5;
	sint64 AccNumber = 6;
	double LimitPrice_OrderModifyMsg = 7;
}
message OrderRemoveMsg
{
	//Orgin server id. It can be retrieved from "OrderInfoMsg" message
	sint64 OrgServerId = 1;
	sint64 AccNumber = 2;
}
message BracketStrategyParam
{
	//Static means that the insert price of the order is calculated based on the insert price of the parent order, 
	//otherwise it will be based on the exeuction price
	enum TypeEnum
	{
		STOP_AND_TARGET = 0;
		STOP_AND_TARGET_STATIC = 1;
		STOP = 2;
		STOP_STATIC = 3;
		TARGET = 4;
		TARGET_STATIC = 5;
	}
	TypeEnum Type = 1;
	repeated BracketParam Stops = 2;
	repeated BracketParam Targets = 3;
	enum StopTrailingModeEnum{
		None = 0;
		Breakeven = 1;
		Trailing = 2;
	};
	//N/A at the moment
	StopTrailingModeEnum TrailingMode = 4;
	//N/A at the moment
	int32 TrailingTicks = 5;
	//N/A at the moment
	int32 TrailingMinOffsetTicks = 6;
}
message BracketParam{
	enum PriceModeEnum
	{
		Ticks = 0;
		Price_PriceModeEnum = 1;
	}
	//Must be ABS value. The side is taken based the quantity of the parent order
	int32 Quantity = 1;
	PriceModeEnum PriceMode = 2;
	//required if PriceMode = Ticks, otherwise price param is used and required
	int32 TicksOffset = 3;
	//required if PriceMode = Price
	double Price_BracketParam = 4;
}
message BracketInsertMsg
{
	sint64 RequestId = 1;
	//Order id to which the strategy should be attached
	sint64 ParentOrderId = 2;
	BracketStrategyParam BracketStrategy = 3;
	sint64 AccNumber = 4;
}
message BracketModifyMsg
{
	//Parent order id of which the bracket is attached
	sint64 ParentOrderId = 1;
	sint64 BracketId = 2;
	//Quantity is ingnored in this case. Quantity cannot be changed
	BracketParam BracketParam = 3;
	//This can be filled to track the bracket on realtime server updates. It has to be unique for each session
	//Default value is -1
	int32 ClientId = 4;
	sint64 AccNumber = 5;
}
message OrderInfoMsg
{
	//Contract id of the intrument where the order has been placed
	sint64 ContractId = 1;
	//Orgin server id. It persists for the whole lifetime of the orders
	sint64 OrgServerId = 2;
	//Client id setted on OrderInsertMsg with the "SeqClientId" parameter
	int32 OrgClientId = 3;
	//Sequence server id. It is the same the first time, but it changes on order modify
	int64 SeqServerId = 4;
	//It is the same for the first status received, while it is equal to the id setted "OrderModifyMsg" with the "NewSeqClientId" parameter for order mdoify
	int32 SeqClientId = 5;
	//Price of the order
	double OrderPrice = 6;
	//Not null only for STOP LIMIT orders. It is the stop limit price
	double OrderLimitPrice = 7;
	//Pending quantity of the order. Negative numbers mean that it is a sell order
	int32 PendingQty = 8;
	//Filled quantity of the order. Negative numbers mean that it is a sell order
	int32 FilledQty = 9;
	//Order type
	OrderTypeEnum OrderType = 10;
	enum OrderStateEnum
	{
		//Received for pending orders, modified orders, partial executed and fully executed orders
		Submitted = 0;
		//Order has been removed
		Canceled = 1;
		//An error occurs with the order. It is it received, it means that the order is not pending anymore
		Error = 2;
		//An error occur on the modify of the order. The order IS STILL pending at the old price and old quantities
		ErrorModify = 3;
	}
	OrderStateEnum OrderState = 11;
	//average price of last executed filled quantity
	double AvgPrice = 12;
	enum SnapTypeEnum{
	    Blank_choice_0 = 0;
		//Snapshot status of the order. Filled quantity in this case must not be included/added on the portfolio. Look the example for better clarity
		Historical = 1;
		//Realtime update
		RealTime = 2;
		//Portfolio snapshot
		HistPos = 3;
	}
	SnapTypeEnum SnapType = 13;
	//Account number
	sint64 AccNumber = 14;
	//It is setted for "Error" or "ErrorModify" status. It describes the reason of the error
	string Reason = 15;
	string FeedSymbol = 16;
	//Not used in this scenario
	string Isin = 17;

	/*********OCO AREA, otherwise -1 for all this values******/
	//Oco Group Id. Multiple order can have the same Oco Group Id. It can be usefull for get the linked orders
	sint64 OcoLinkedGroupId = 18;
	//Linked order to this order. It means for example that if this order is removed, every linked order is removed too
	repeated sint64 OcoLinkedOrderIds = 19;
	// The parent order from where this order has been generated
	sint64 OcoParentOrderId = 20;
}
message BracketInfoMsg
{
	//Contract id of the intrument where the order has been placed
	sint64 ContractId = 1;
	//Server order id of the order where this bracket is attached
	sint64 ParentOrderId = 2;
	//Multiple stops and/or targets have the same value. Usefull for rebuild linked brackets
	sint64 OcoGroupId = 3;
	//Bracket id. It persists for the whole lifetime of the bracket
	sint64 BracketId = 4;
	//It is the same for the first status received, while it is equal to the id setted "OrderModifyMsg" with the "NewSeqClientId" parameter for order mdoify
	int32 SeqClientId = 5;
	//Price of the order
	double Price = 6;
	//-1 if not used
	sint32 Ticks = 7;
	double CalculatedPrice = 8;
	//Total original quantity of the bracket. Negative numbers mean that it is a sell bracket
	int32 TotalQty = 9;
	//Resting quantity of the bracket. Negative numbers mean that it is a sell bracket
	int32 ReleasedQty = 10;
	bool IsTarget = 11;
	enum BracketStateEnum
	{
		//Bracket is waiting to be converted to an order
		Waiting = 0;
		//Bracket has been fully converted to an order. Rest quantity is always 0 in this case
		Submitted = 1;
		//Bracket has been removed. It means that the parent order has been cancelled
		Cancelled = 2;
		//Error. The modify requested for the broker has not been successfull
		Error = 3;
	}
	BracketStateEnum BracketState = 12;
	enum SnapTypeEnum{
        Blank_choice_1 = 0;
		//Snapshot status of the order. Filled quantity in this case must not be included/added on the portfolio. Look the example for better clarity
		Historical = 1;
		//Realtime update
		RealTime = 2;
	}
	SnapTypeEnum SnapType = 13;
	//Account number
	sint64 AccNumber = 14;
	//It is setted for "Error" status. It describes the reason of the error
	string Reason = 15;
	string FeedSymbol = 16;
	//Not used in this scenario
	string Isin = 17;
}
message LogInfoMsg
{
	string Msg = 1;
	//it could be -1 if it is a generic message and it is not related to any account
	sint64 AccNumber = 2;
}
//
message PositionInfoMsg{
	//Contract id of the intrument where the order has been placed
	sint64 ContractId = 1;
	sint64 OpenQuantity = 2;
	double OpenPrice = 3;
	double MarginUsed = 4;
	sint64 DailyBought = 5;
	sint64 DailySold = 6;
	double DailyPl = 7;
	bool HasOpenPl = 8;
	double OpenPl = 9;
	double DailyCommissions = 10;
	enum SnapTypeEnum{
	    Blank_choice_2 = 0;
		//Snapshot status of the order. Filled quantity in this case must not be included/added on the portfolio. Look the example for better clarity
		Historical = 1;
		//Realtime update
		RealTime = 2;
	}
	SnapTypeEnum SnapType = 11;
	//Account number
	sint64 AccNumber = 12;
	string FeedSymbol = 13;
	//Not used in this scenario
	string Isin = 14;
}
//Balance update sent by the server for the user's accounts. It is sent at the begninng for a snapshot and then it is only sent when a trade is closed.
message BalanceMsg{
	double Balance = 1;
	sint64 AccNumber = 2;
	//it is always empty. It is not used for this situation
	string Description = 3;
	//Currently margin used by opened positions
	double MarginUsed = 4;
	//Optional - if the challenge has a stop drawdown setted, this is the trigger balance, otherwise -1
	double StopDrawdownOverall = 5;
	//Optional - if the challenge has a stop intraday drawdown setted, this is the trigger balance, otherwise -1
	double StopDrawdownIntraday = 6;
	//Optional - if the challenge has a profit target, this is the trigger balance, otherwise -1
	double ProfitTarget = 7;
}
message SymbolLookupReqMsg{
	sint64 RequestId = 1;
	//optional - may be also null
	string Filter = 2;
}
message SymbolLookupRespMsg{
	sint64 RequestId = 1;
	repeated SymbolLookupInfo Symbols = 2;
}
message SymbolLookupInfo{
	string Symbol = 1;
	string Description = 2;
	string Exchange = 3;
	double TickSize = 4;
	double OrderCommission = 5;
}
message CancelFlatReqMsg
{
	enum ActionEnum
	{
		//Flat position, if any, opened
		FLAT = 0;
		//Cancel all orders
		CANCEL = 1; 
		//Cancel orders and flat positions
		FLAT_CANCEL = 2;
	}
	sint64 RequestId = 1;
	sint64 AccNumber = 2;
	//if empty, it means that the action is taken on all the contracts for the account
	repeated sint64 ContractsId = 3;
	ActionEnum Action = 4;
}
message CancelFlatRespMsg
{
	sint64 RequestId = 1;
	sint64 AccNumber = 2;
	//if empty, all request has been correclty executed
	repeated CancelFlatErrorDetail Errors = 3;
}
message CancelFlatErrorDetail
{
	sint64 ContractId = 1;
	string Error = 2;
}
message BracketInsertReportMsg
{
	//Request id sent to the server from client
	sint64 RequestId = 1;
	bool Success = 2;
	//If success = false, here there is the reason
	string Reason = 3;
}
message AccountStatusUpdateMsg
{
	enum ActionEnum
	{
		//New account has been created
		ADD = 0;
		//account status update
		UPDATE = 1; 
		//Account has been removed
		REMOVE = 2;
	}
	sint64 AccountId = 1;
	ActionEnum Action = 2;
	AccountHeaderMsg Info = 3;
}
